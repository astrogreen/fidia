import astropy.io.fits as fits
import matplotlib.pyplot as plt
import matplotlib.cm as cm
from matplotlib.colors import LinearSegmentedColormap
from matplotlib.patches import Circle
import numpy as np
from PIL import Image
from array import array
import sys,getopt,struct
#np.set_printoptions(threshold=np.nan)

velmap = cm.get_cmap("RdYlBu_r", 256) # customize color tables
velmap1 = velmap(np.arange(256))
velmap1[0] = np.array([0.7,0.7,0.7,1])
velmap = LinearSegmentedColormap.from_list("newvel",velmap1)
fmap = cm.get_cmap("YlOrRd", 256)
fmap1 = fmap(np.arange(256))
fmap1[0] = np.array([0.7,0.7,0.7,1])
fmap = LinearSegmentedColormap.from_list("newfmap",fmap1)

jet = cm.get_cmap("gnuplot", 200)
jet1 = cm.get_cmap("gist_rainbow",256)
jet_vals = jet(np.arange(256))
jet1_vals = jet1(np.arange(256))
fin = np.zeros((256,4))
fin[:200] = jet_vals[:200]
fin[200:] = jet1_vals[80:136+56:2]
fin[0] = np.array([0.7,0.7,0.7,1])
newcmap = LinearSegmentedColormap.from_list("newjet", fin)

stars = { # psfs from Sam
   '16026': 2.45566558503, '16294': 2.45566558503, '209319': 1.60064428662,
   '209414': 1.60064428662, '209698': 2.48269186969, '209701': 2.48269186969,
   '209708': 2.48269186969, '209743': 2.48269186969, '209807': 2.48269186969,
   '215053': 1.60064428662, '215292': 1.60064428662, '215698': 2.48269186969,
   '216843': 2.55271427419, '218713': 2.55271427419, '218717': 1.61645986484,
   '227278': 2.06709644922, '227371': 2.06709644922, '227428': 2.06709644922,
   '238085': 2.06709644922, '238164': 2.06709644922, '238204': 2.06709644922,
   '238216': 2.52553548817, '238221': 2.52553548817, '238328': 2.52553548817,
   '238351': 2.52553548817, '238360': 2.52553548817, '238395': 2.52553548817,
   '250183': 2.52553548817, '278643': 1.60064428662, '278684': 1.60064428662,
   '278702': 1.60064428662, '278741': 1.60064428662, '278909': 2.48269186969,
   '278995': 2.48269186969, '279818': 2.55271427419, '279878': 2.55271427419,
   '279886': 1.61645986484, '279891': 1.61645986484, '279917': 1.61645986484,
   '279943': 2.55271427419, '296685': 2.06709644922, '296798': 2.06709644922,
   '296848': 2.06709644922, '301098': 1.8647410891, '301799': 1.88145075531,
   '302846': 1.61645986484, '302994': 1.61645986484, '319018': 2.06709644922,
   '319057': 2.06709644922, '319059': 2.52553548817, '319067': 2.52553548817,
   '319070': 2.06709644922, '319272': 2.52553548817, '319385': 2.52553548817,
   '319397': 2.52553548817, '323504': 1.8647410891, '323505': 1.8647410891,
   '323577': 1.8647410891, '324323': 1.88145075531, '324351': 1.88145075531,
   '325390': 1.61645986484, '345646': 2.01150510138, '345682': 2.01150510138,
   '345820': 2.45223441792, '346046': 1.8647410891, '346718': 1.88145075531,
   '346793': 1.88145075531, '346839': 1.88145075531, '346890': 1.88145075531,
   '346892': 1.88145075531, '346894': 1.88145075531, '348115': 2.4628274026,
   '348116': 2.4628274026, '36894': 2.04474422711, '37050': 2.70865317607,
   '373173': 1.61645986484, '373202': 1.61645986484, '373248': 2.55271427419,
   '373284': 2.55271427419, '376001': 1.8647410891, '376121': 1.8647410891,
   '376161': 1.8647410891, '376185': 1.8647410891, '376802': 1.88145075531,
   '377962': 1.61645986484, '381159': 1.8647410891, '381207': 1.8647410891,
   '381215': 2.45223441792, '381225': 1.8647410891, '381229': 2.45223441792,
   '382152': 1.88145075531, '382158': 1.88145075531, '383259': 2.4628274026,
   '383283': 2.4628274026, '383318': 2.4628274026, '386268': 2.45223441792,
   '388451': 2.4628274026, '388476': 2.4628274026, '388552': 2.4628274026,
   '388603': 2.4628274026, '417392': 2.01150510138, '417424': 2.01150510138,
   '417486': 2.45223441792, '417568': 2.45223441792, '417580': 2.45223441792,
   '419632': 2.4628274026, '422292': 2.01150510138, '422320': 2.01150510138,
   '422355': 2.01150510138, '422359': 2.01150510138, '422366': 2.01150510138,
   '422406': 2.01150510138, '422639': 2.45223441792, '422683': 2.45223441792,
   '463317': 2.04474422711, '47286': 2.04474422711, '47342': 1.88155892715,
   '47500': 1.88155892715, '47535': 1.88155892715, '485504': 2.70865317607,
   '485690': 1.68892140122, '485885': 1.68892140122, '485922': 1.68892140122,
   '485924': 1.68892140122, '492384': 2.70865317607, '492414': 2.70865317607,
   '496966': 2.04474422711, '49857': 2.11319295636, '504713': 1.68892140122,
   '504882': 1.68892140122, '504922': 1.68892140122, '508138': 2.70865317607,
   '508144': 2.70865317607, '508268': 2.70865317607, '508312': 2.70865317607,
   '508414': 1.68892140122, '508421': 1.68892140122, '508480': 1.68892140122,
   '508481': 1.68892140122, '508682': 1.68892140122, '511789': 2.70865317607,
   '62412': 1.88155892715, '511863': 2.70865317607, '511867': 2.70865317607,
   '511890': 2.70865317607, '514214': 2.4628274026, '514260': 2.4628274026,
   '517070': 2.01150510138, '517130': 2.01150510138, '517164': 2.45223441792,
   '517205': 2.45223441792, '517302': 2.45223441792, '543489': 2.04474422711,
   '543499': 2.04474422711, '543536': 2.04474422711, '543552': 2.04474422711,
   '543554': 2.04474422711, '543738': 2.04474422711, '543752': 1.88155892715,
   '543763': 1.88155892715, '543769': 1.88155892715, '543812': 1.88155892715,
   '543859': 1.88155892715, '567545': 2.04474422711, '567624': 2.04474422711,
   '567676': 1.88155892715, '567678': 1.88155892715, '567736': 1.88155892715,
   '570206': 2.11319295636, '570207': 2.11319295636, '570227': 2.64613360656,
   '574200': 2.48269186969, '594906': 2.11319295636, '594946': 2.64613360656,
   '594970': 2.11319295636, '594986': 2.64613360656, '594990': 2.64613360656,
   '595027': 2.11319295636, '595060': 2.64613360656, '599839': 1.60064428662,
   '599873': 1.60064428662, '600030': 1.60064428662, '618906': 2.45566558503,
   '618931': 2.45566558503, '618935': 2.45566558503, '618942': 2.45566558503,
   '618952': 2.45566558503, '618993': 2.45566558503, '619097': 2.45566558503,
   '619105': 2.45566558503, '620034': 2.64613360656, '620087': 2.64613360656,
   '620098': 2.64613360656, '622394': 1.60064428662, '622694': 2.48269186969,
   '622744': 2.48269186969, '622770': 2.48269186969, '623620': 2.55271427419,
   '623641': 2.55271427419, '623679': 2.55271427419, '623712': 2.55271427419,
   '623722': 1.61645986484, '623726': 2.55271427419, '65278': 2.11319295636,
   '65406': 2.64613360656, '65410': 2.11319295636, '78667': 2.45566558503,
   '79635': 2.11319295636, '79690': 2.64613360656, '79693': 2.11319295636,
   '79710': 2.11319295636, '79712': 2.11319295636, '79771': 2.64613360656,
   '79850': 2.64613360656, '92770': 2.45566558503, '203037': 1.83184865387,
   '203114': 1.83184865387, '203140': 1.83184865387, '203148': 1.83184865387,
   '209181': 1.83184865387, '220320': 2.25657275694, '220371': 2.25657275694,
   '220383': 2.25657275694, '230714': 2.25657275694, '230776': 2.25657275694,
   '230829': 2.25657275694, '238203': 2.15605677161, '238211': 2.15605677161,
   '238276': 2.15605677161, '238282': 2.15605677161, '238358': 2.15605677161,
   '238496': 2.15605677161, '250277': 2.15605677161, '272831': 2.25657275694,
   '288992': 2.25657275694, '289089': 2.25657275694, '289116': 2.25657275694,
   '289185': 2.25657275694, '289200': 2.25657275694, '296829': 2.15605677161,
   '296934': 2.15605677161, '30377': 2.95092596229, '319150': 2.15605677161,
   '319157': 2.15605677161, '319197': 2.15605677161, '39108': 2.95092596229,
   '534654': 2.95092596229, '534655': 2.95092596229, '534710': 2.95092596229,
   '534753': 2.95092596229, '534759': 2.95092596229, '536625': 1.83184865387,
   '536626': 1.83184865387, '53771': 2.95092596229, '53809': 2.95092596229,
   '558861': 2.95092596229, '558887': 2.95092596229, '583443': 2.95092596229,
   '592835': 2.43906056084, '592858': 2.43906056084, '592863': 2.43906056084,
   '593645': 2.18032105175, '593680': 2.18032105175, '599582': 1.83184865387,
   '599689': 1.83184865387, '599761': 1.83184865387, '599838': 1.83184865387,
   '599877': 1.83184865387, '617945': 2.43906056084, '617989': 2.43906056084,
   '618143': 2.43906056084, '618152': 2.43906056084, '618912': 2.18032105175,
   '618938': 2.18032105175, '618992': 2.18032105175, '619046': 2.18032105175,
   '619095': 2.18032105175, '619098': 2.18032105175, '63027': 2.43906056084,
   '64087': 2.18032105175, '77710': 2.43906056084, '78523': 2.18032105175,
   '78531': 2.18032105175, '91924': 2.43906056084, '91963': 2.43906056084,
   '91999': 2.43906056084, '92773': 2.18032105175, '105962': 2.92490586277,
   '106047': 2.92490586277, '15218': 2.92490586277, '198343': 1.84495682155,
   '198503': 1.84495682155, '204799': 1.84495682155, '204832': 1.84495682155,
   '204836': 1.84495682155, '204877': 1.84495682155, '204906': 1.84495682155,
   '215289': 2.46817075061, '215335': 2.46817075061, '227290': 2.06709644922,
   '227351': 2.06709644922, '227407': 2.06709644922, '238080': 2.06709644922,
   '238125': 2.06709644922, '238214': 2.06709644922, '278760': 2.46817075061,
   '278787': 2.46817075061, '278802': 2.46817075061, '278846': 2.46817075061,
   '296713': 2.06709644922, '296847': 2.06709644922, '300350': 2.48391971888,
   '300372': 2.48391971888, '300411': 2.48391971888, '300477': 2.48391971888,
   '318936': 2.06709644922, '319049': 2.06709644922, '319060': 2.06709644922,
   '319139': 2.06709644922, '322910': 2.48391971888, '3634556': 1.84495682155,
   '371889': 2.46817075061, '371976': 2.46817075061, '375402': 2.48391971888,
   '375531': 2.48391971888, '375564': 2.48391971888, '380578': 2.48391971888,
   '380682': 2.48391971888, '380697': 2.48391971888, '380734': 2.48391971888,
   '417678': 2.2915511354, '422721': 2.2915511354, '422761': 2.2915511354,
   '422888': 2.2915511354, '422907': 2.2915511354, '422921': 2.2915511354,
   '422933': 2.2915511354, '517465': 2.2915511354, '517594': 2.2915511354,
   '522033': 2.2915511354, '522127': 2.2915511354, '522166': 2.2915511354,
   '551192': 1.84495682155, '551202': 1.84495682155, '551332': 1.84495682155,
   '575339': 1.84495682155, '600014': 2.46817075061, '600026': 2.46817075061,
   '618071': 2.92490586277, '618108': 2.92490586277, '618116': 2.92490586277,
   '618144': 2.92490586277, '618151': 2.92490586277, '618220': 2.92490586277,
   '622434': 2.46817075061, '622534': 2.46817075061, '77754': 2.92490586277,
   '91926': 2.92490586277, '91996': 2.92490586277, '106717': 1.82339149242,
   '137789': 1.56674581936, '137847': 1.56674581936, '138066': 2.79793038104,
   '138094': 2.79793038104, '138132': 2.79793038104, '144239': 1.56674581936,
   '144243': 1.56674581936, '144320': 1.56674581936, '144402': 1.56674581936,
   '144465': 2.79793038104, '144480': 1.56674581936, '144491': 2.79793038104,
   '144498': 2.79793038104, '144682': 2.79793038104, '178481': 2.79793038104,
   '178578': 2.79793038104, '185252': 1.56674581936, '185291': 1.56674581936,
   '185376': 1.56674581936, '185510': 2.79793038104, '185532': 2.79793038104,
   '228428': 1.82339149242, '228432': 1.82339149242, '239172': 1.82339149242,
   '239249': 1.82339149242, '239292': 1.82339149242, '239376': 1.82339149242,
   '28860': 1.82339149242, '297667': 1.8723167958, '297705': 1.82339149242,
   '31452': 1.56674581936, '31509': 1.56674581936, '31620': 2.79793038104,
   '320068': 1.82339149242, '320124': 1.82339149242, '32362': 2.50929138406,
   '41144': 2.50929138406, '41164': 2.50929138406, '486872': 1.89856107767,
   '486957': 1.89856107767, '487010': 1.89856107767, '487027': 1.89856107767,
   '493621': 1.89856107767, '493811': 1.89856107767, '493825': 1.89856107767,
   '505979': 1.89856107767, '509557': 1.89856107767, '509576': 1.89856107767,
   '509670': 1.89856107767, '509727': 1.89856107767, '537163': 2.50929138406,
   '537171': 2.50929138406, '537187': 2.50929138406, '537367': 2.50929138406,
   '537417': 2.50929138406, '56064': 2.50929138406, '56140': 1.71104462395,
   '56183': 2.50929138406, '561856': 2.50929138406, '15165': 2.81007747255,
   '22839': 1.8569039278, '16525': 1.56750679048, '585755': 1.71104462395,
   '583637': 2.06901430975, '137155': 2.5465665889, '491457': 2.54018182789,
   '23737': 1.64578782975, '513066': 1.77806545538, '106016': 2.81007747255,
   '609396': 2.06901430975, '137071': 2.5465665889, '22932': 1.8569039278,
   '610893': 1.64578782975, '41075': 1.71104462395, '594059': 1.56750679048,
   '491552': 2.54018182789, '486782': 1.77806545538, '272443': 1.8569039278,
   '594053': 1.56750679048, '184648': 2.5465665889, '463264': 2.54018182789,
   '23591': 1.64578782975, '15220': 2.81007747255, '56055': 1.71104462395,
   '98652': 1.8569039278, '583716': 2.06901430975, '594049': 1.56750679048,
   '30914': 2.5465665889, '509397': 1.77806545538, '227673': 2.81007747255,
   '463288': 2.54018182789, '23593': 1.64578782975, '760733': 1.71104462395,
   '53977': 2.06901430975, '84677': 1.8569039278, '78791': 1.56750679048,
   '143736': 2.5465665889, '227607': 2.81007747255, '460378': 2.54018182789,
   '586330': 1.71104462395, '69653': 2.06901430975, '272439': 1.8569039278,
   '16487': 1.56750679048, '177481': 2.5465665889, '618100': 2.81007747255,
   '505788': 1.77806545538, '99393': 1.64578782975, '71382': 1.71104462395,
   '69620': 2.06901430975, '184689': 2.5465665889, '91959': 2.81007747255,
   '78827': 1.56750679048, '84048': 2.06901430975, '460374': 2.54018182789,
   '609433': 2.06901430975, '7715': 1.8569039278, '618142': 2.81007747255,
   '143814': 2.5465665889, '513001': 1.77806545538, '583744': 2.06901430975,
   '585694': 1.71104462395, '106065': 2.81007747255, '7841': 1.8569039278,
   '85507': 1.64578782975, '491508': 2.54018182789, '30890': 2.5465665889,
   '619258': 1.56750679048, '69740': 2.06901430975, '106049': 2.81007747255,
   '22862': 1.8569039278, '586326': 1.71104462395, '143746': 2.5465665889,
   '509516': 1.77806545538, '460424': 2.54018182789, '78921': 1.56750679048,
   '84106': 2.06901430975, '91989': 2.81007747255, '55905': 1.71104462395,
   '84680': 1.8569039278, '177518': 2.5465665889, '543498': 2.54018182789,
   '93167': 1.56750679048, '106042': 2.81007747255, '505828': 1.77806545538,
   '99349': 1.64578782975, '84107': 2.06901430975, '137037': 2.5465665889,
   '585659': 1.71104462395, '272488': 1.8569039278, '463148': 2.54018182789,
   '93062': 1.56750679048, '71352': 1.71104462395, '22887': 1.8569039278,
   '8391': 1.64578782975, '491608': 2.54018182789, '93020': 1.56750679048,
   '486834': 1.77806545538, '85479': 1.64578782975, '543537': 2.54018182789,
   '513108': 1.77806545538, '610997': 1.64578782975, '509444': 1.77806545538,
   '85418': 1.64578782975, '505817': 1.77806545538, '505765': 1.77806545538,
   '37064': 2.70865317607, '485529': 2.70865317607, '485646': 2.70865317607,
   '492411': 2.70865317607, '508132': 2.70865317607, '508180': 2.70865317607,
   '508184': 2.70865317607, '508315': 2.70865317607, '508351': 2.70865317607,
   '511864': 2.70865317607, '511892': 2.70865317607, '511921': 2.70865317607,
   '376340': 2.71894864753, '348118': 1.61645986484, '100192': 1.77106999461,
   '387687': 1.72563375185, '325536': 1.61645986484, '418795': 1.72563375185,
   '323888': 2.71894864753, '273850': 1.77106999461, '325533': 1.61645986484,
   '387690': 1.72563375185, '301191': 2.71894864753, '378142': 1.61645986484,
   '347522': 1.72563375185, '346257': 2.71894864753, '273966': 1.77106999461,
   '378060': 1.61645986484, '376293': 2.71894864753, '100162': 1.77106999461,
   '378104': 1.61645986484, '418725': 1.72563375185, '323874': 2.71894864753,
   '9352': 1.77106999461, '418693': 1.72563375185, '323855': 2.71894864753,
   '221375': 1.77106999461, '382631': 1.72563375185, '323854': 2.71894864753,
   '325378': 1.61645986484, '24414': 1.77106999461, '325441': 1.61645986484,
   '387675': 1.72563375185, '24433': 1.77106999461, '376379': 2.71894864753,
   '383147': 1.61645986484, '382659': 1.72563375185, '371882': 2.71894864753,
   '273986': 1.77106999461, '325467': 1.61645986484, '347470': 1.72563375185,
   '381502': 2.71894864753, '347432': 1.72563375185, '325376': 1.61645986484,
   '273976': 1.77106999461, '301201': 2.71894864753, '347570': 1.72563375185,
   '303099': 1.61645986484, '100175': 1.77106999461, '273952': 1.77106999461,
   '230774': 2.25657275694, '289097': 2.25657275694, '230793': 2.25657275694,
   '272996': 2.25657275694, '220394': 2.25657275694, '220326': 2.25657275694,
   '289096': 2.25657275694, '205208': 2.72247137349, '551672': 2.72247137349,
   '198771': 2.72247137349, '575579': 2.72247137349, '345754': 1.74103015024,
   '517306': 1.74103015024, '517310': 1.74103015024, '622588': 2.46817075061,
   '376478': 2.46817075061, '216670': 1.91755941522, '601255': 1.91755941522,
   '220330': 2.25657275694, '417453': 1.74103015024, '521898': 1.74103015024,
   '272833': 2.25657275694, '230837': 2.25657275694, '198591': 2.72247137349,
   '517295': 1.74103015024, '205168': 2.72247137349, '345848': 1.74103015024,
   '210781': 1.91755941522, '289217': 2.25657275694, '601323': 1.91755941522,
   '210611': 1.91755941522, '23337': 2.25657275694, '278703': 2.46817075061,
   '278812': 2.46817075061, '220170': 2.25657275694, '301346': 2.46817075061,
   '289170': 2.25657275694, '289109': 2.25657275694, '220319': 2.25657275694,
   '288923': 2.30346313348, '278736': 2.46817075061, '210660': 1.91755941522,
   '230787': 2.25657275694, '230777': 2.25657275694, '422486': 1.74103015024,
   '551505': 2.72247137349, '301382': 2.46817075061, '622429': 2.46817075061,
   '205097': 2.72247137349, '551507': 2.72247137349, '551488': 2.72247137349,
   '289176': 2.25657275694, '422464': 1.74103015024, '601395': 1.91755941522,
   '601210': 1.91755941522, '289112': 2.25657275694, '220375': 2.25657275694,
   '289107': 2.25657275694, '623432': 1.91755941522, '278773': 2.46817075061,
   '289085': 2.25657275694, '278804': 2.46817075061, '371959': 2.46817075061,
   '204868': 2.72247137349, '205086': 2.72247137349, '422619': 1.74103015024,
   '198631': 2.72247137349, '517167': 1.74103015024, '575625': 2.72247137349,
   '575670': 2.72247137349, '601283': 1.91755941522, '422443': 1.74103015024,
   '551655': 2.72247137349, '218681': 1.91755941522, '278855': 2.46817075061,
   '205161': 2.72247137349, '210808': 1.91755941522, '210909': 2.72247137349,
   '204876': 2.72247137349, '575532': 2.72247137349, '205089': 2.72247137349,
   '204983': 2.72247137349, '551368': 2.72247137349, '551350': 2.72247137349,
   '371750': 1.79103709443, '371714': 1.79103709443, '371789': 1.79103709443,
   '323575': 1.79103709443, '371633': 1.79103709443, '230719': 2.25657275694,
   '301199': 1.79103709443, '289118': 2.25657275694, '376184': 1.79103709443,
   '184370': 2.58248591862, '220439': 2.25657275694, '376282': 1.79103709443,
   '184281': 2.58248591862, '136980': 2.58248591862, '23265': 2.25657275694,
   '278548': 1.79103709443, '220355': 2.25657275694, '8562': 2.70870576027,
   '289095': 2.25657275694, '85464': 2.70870576027, '376165': 1.79103709443,
   '220450': 2.25657275694, '136917': 2.58248591862, '177326': 2.58248591862,
   '289279': 2.25657275694, '323507': 1.79103709443, '230786': 2.25657275694,
   '184237': 2.58248591862, '99259': 2.70870576027, '8490': 2.70870576027,
   '376163': 1.79103709443, '8353': 2.70870576027, '220332': 2.25657275694,
   '136672': 2.58248591862, '143499': 2.58248591862, '230797': 2.25657275694,
   '136602': 2.58248591862, '288999': 2.30346313348, '184415': 2.58248591862,
   '85423': 2.70870576027, '85481': 2.70870576027, '85474': 2.70870576027,
   '136842': 2.58248591862, '136856': 2.58248591862, '23619': 2.70870576027,
   '99430': 2.70870576027, '23669': 2.70870576027, '85416': 2.70870576027,
   '417441': 1.74103015024, '381156': 1.74103015024, '517249': 1.74103015024,
   '517247': 1.74103015024, '381206': 1.74103015024, '517273': 1.74103015024,
   '288903': 2.30346313348, '289194': 2.30346313348, '220275': 2.30346313348,
   '417433': 1.74103015024, '288904': 2.30346313348, '517307': 1.74103015024,
   '345767': 1.74103015024, '230880': 2.30346313348, '230789': 2.30346313348,
   '517256': 1.74103015024, '220374': 2.30346313348, '386286': 1.74103015024,
   '517334': 1.74103015024, '230813': 2.30346313348, '220227': 2.30346313348,
   '289198': 2.30346313348, '85505': 1.56669168195, '99410': 1.56669168195,
   '99511': 1.56669168195, '220687': 1.56669168195, '220750': 1.56669168195,
   '99326': 1.56669168195, '8487': 1.56669168195, '273296': 1.56669168195,
   '8570': 1.56669168195, '23623': 1.56669168195, '23868': 1.56669168195,
   '8485': 1.56669168195, '56181': 2.50929138406, '41173': 2.50929138406,
   '537226': 2.50929138406, '537399': 2.50929138406, '56061': 2.50929138406,
   '537361': 2.50929138406, '106376': 1.9241034139, '106331': 1.9241034139,
   '227961': 1.9241034139, '228086': 1.9241034139, '238922': 1.9241034139,
   '227905': 1.9241034139, '228104': 1.9241034139, '228066': 1.9241034139,
   '15481': 1.9241034139, '106343': 1.9241034139, '227970': 1.9241034139,
   '106389': 1.9241034139, '22582': 1.8620128826, '402988': 1.8620128826,
   '288461': 1.8620128826, '230174': 1.8620128826, '288364': 1.8620128826,
   '397449': 1.8620128826, '288424': 1.8620128826, '272190': 1.8620128826,
   '239109': 1.8723167958, '22595': 1.8620128826, '22633': 1.8620128826,
   '272298': 1.8620128826, '402934': 1.8620128826, '106549': 1.8723167958,
   '297557': 1.8723167958, '106616': 1.8723167958, '106634': 1.8723167958,
   '106638': 1.8723167958, '106507': 1.8723167958, '228105': 1.8723167958,
   '239092': 1.8723167958, '297633': 1.8723167958, '297694': 1.8723167958,
   '91961': 2.81007747255, '91988': 2.81007747255, '227617': 2.81007747255,
   '536463': 2.6380403006, '585386': 2.6380403006, '560946': 2.6380403006,
   '561143': 2.6380403006, '585359': 2.6380403006, '40765': 2.6380403006,
   '55537': 2.6380403006, '585314': 2.6380403006, '536454': 2.6380403006,
   '560982': 2.6380403006, '561020': 2.6380403006, '560883': 2.6380403006,
   '23519': 2.54520004325, '220578': 2.54520004325, '231024': 2.54520004325,
   '23578': 2.54520004325, '220515': 2.54520004325, '272995': 2.54520004325,
   '23565': 2.54520004325, '273092': 2.54520004325, '289429': 2.54520004325,
   '230898': 2.54520004325, '289427': 2.54520004325, '220499': 2.54520004325,
   '288756': 2.21710222478, '288891': 2.21710222478, '23117': 2.21710222478,
   '220218': 2.21710222478, '288851': 2.21710222478, '23070': 2.21710222478,
   '272748': 2.21710222478, '272667': 2.21710222478, '230560': 2.21710222478,
   '230634': 2.21710222478, '220126': 2.21710222478, '220112': 2.21710222478 }

vmn = -100.; dv = 0.
test = False
root = '/run/media/cecil/TOSHIBA/SGS/'
meta = root+'metadata/'
try: opts, args = getopt.getopt(sys.argv[1:],"hn:b:x:m:v:")
except getopt.GetoptError:
   print 'new.py -n <file> -b <run#> -x <extension> -m <velocity range override> -v <velocity shift>'
   sys.exit(0)
for opt, arg in opts:
   if opt == '-h':
      print 'new.py -n <file> -b <run#> -x <extension> -m <velocity range override> -v <velocity shift>'
   elif opt == '-b': 
      cb = str(arg)
   elif opt == '-n': c = arg
   elif opt == '-m': vmn = float(arg)
   elif opt == '-v': dv = float(arg)
   elif opt == '-x': 
      ex = arg
      try:
         print root+c+'_blue_'+cb+'_'+ex
         hdulist = fits.open(root+c+'_blue_'+cb+'_'+ex+'.fits.gz')
         bhdr = hdulist[0].header
         bcube = hdulist[0].data
         bcube = bcube[20:-60].clip(0.)
         bvar = hdulist[1].data
         bvar = bvar[20:-60].clip(0)
         bw0, bdw = bhdr['CRVAL3'], bhdr['CDELT3']
         bwN = bcube.shape[0]
         bw0 -= bdw*(bhdr['CRPIX3']-1-20)
         hdulist.close()
      except:
         print 'no blue cube'

      try:
         hdulist = fits.open(root+c+'_red_'+cb+'_'+ex+'.fits.gz')
         rhdr = hdulist[0].header
         rcube = (hdulist[0].data).clip(0.)
         rcube[:70] = 0. # avoid spike
         rvar = (hdulist[1].data).clip(0.)
         rvar[:70] = 0.
         rw0, rdw = rhdr['CRVAL3'], rhdr['CDELT3']
         rw0 -= rdw*(rhdr['CRPIX3']-1)
         rwN = rcube.shape[0]
         hdulist.close()
      except:
         print 'no red cube'

try:
   sersicR, sersichdr = fits.getdata(meta+c+'/'+c+'_GAMA_metadata.fits.gz','SERSIC_R_MODEL',header=True)
   model = True
except:
   model = False
   print 'no sersic model fit'
fwhm = stars[c]
hdu = fits.open(meta+c+'/'+c+'_GAMA_metadata.fits.gz')
try:
   tbdata = hdu['STELLARMASSES'].data
   absG = tbdata[0].field('absmag_g')
   absR = tbdata[0].field('absmag_r')
   absI = tbdata[0].field('absmag_i')
   absZ = tbdata[0].field('absmag_z')
   GAMAmetal = tbdata[0].field('metal')
   GAMAage = tbdata[0].field("logLWage") # log10 light-weighted age in Gyr
except KeyError:
   absG = -999.
   absR = -999.
   absI = -999.
   absZ = -999.
   GAMAmetal = -999.
   GAMAage = -999.
   print "no mass or magnitudes from GAMA"
if hdu: hdu.close() # nothing if still []

LZ = root+'lzifu/GAMA/'+c+'_1_comp.fits.gz'
hdr = fits.getheader(LZ,0)
zsh = hdr['Z_LZIFU']+dv/299792.458 
vLZ = fits.getdata(LZ,'V')[1]-dv
haLZ = fits.getdata(LZ,'HALPHA')[1]
hbLZ = fits.getdata(LZ,'HBETA')[1]
dustTau = np.log(haLZ/hbLZ/2.86)
n2LZ = fits.getdata(LZ,'NII6583')[1]
s2ratio = (fits.getdata(LZ,'SII6716')[1]/fits.getdata(LZ,'SII6731')[1])
s2byha = np.log10((fits.getdata(LZ,'SII6716')[1]+fits.getdata(LZ,'SII6731')[1])/haLZ)
s2ratio[(s2ratio < 0.33) | (s2ratio > 1.75)] = 0.32
O3LZ = fits.getdata(LZ,'OIII5007')[1]
o3byhb = np.log10(O3LZ/hbLZ)
o3byhb[(o3byhb > 40.)] = np.nan
n2byha = np.log10(n2LZ/haLZ) 
bptgrid = (256-np.outer(np.linspace(16,0,50),np.linspace(16,0,50)))**3/256.**2.
for j in range(50):
   for i in range(50):
       if bptgrid[j,i] > 0.6:
          if (i > 24) and (j-21 < (i-23)*2.3) and (j-21 > (28-i)*3.7):
             bptgrid[j,i] = bptgrid[j,i]-0.7+(bptgrid[j,i]-0.7)**0.9
          else:
             bptgrid[j,i] = bptgrid[j,i]*0.9

o3byhbmn = -0.9; o3byhbmx = 1.5; n2byhamn = -1.7; n2byhamx = 0.9
bpt = np.zeros((50,50))
ix = 50*(n2byha-n2byhamn)/(n2byhamx-n2byhamn)
iy = 50*(o3byhb-o3byhbmn)/(o3byhbmx-o3byhbmn)
for j in range(50):
  for i in range(50):
    if (0 <= ix[j,i] < 50) and (0 <= iy[j,i] < 50) and ~np.isnan(n2byha[j,i]*o3byhb[j,i]): 
       bpt[j,i] = bptgrid[iy[j,i],ix[j,i]]

bpt[5,5] = np.nanmax(bptgrid) # scale to full range
fig = plt.figure(figsize=(10,10))

def mapit(im1,cap,cm,x,y,mn=1,mx=99,origin='lower',lab=False,vel=False):
   im = im1.copy()
   ax = plt.Axes(fig,[x*0.25,y*0.25,.23,.23])
   maxv = np.nanpercentile(im,mx)
   minv = np.nanpercentile(im,mn)
   if vel:
     midv = np.nanpercentile(im,50)
     if maxv != vmn:
         maxv = vmn
         minv = -vmn
     elif maxv-midv > midv-minv:
        maxv = midv-minv
     else:
        minv = midv-maxv
   im[np.isnan(im)] = minv
   ax.set_xticklabels([])
   ax.set_yticklabels([])
   fig.add_axes(ax)
   cbar = plt.colorbar(ax.imshow(im,cmap=cm,origin=origin,interpolation='none',vmin=minv,vmax=maxv,zorder=0),ax=ax,pad=0,aspect=30)
   if lab:
     plt.xticks([0,12.5,25,37.5,50],['-1.7','-1.05','-0.4','0.25','0.9'])
     plt.yticks([0,12.5,25,37.5,50],['-0.9','-0.3','0.3','0.9','1.5'])
     plt.tick_params(labelsize=6)
   cbar.ax.tick_params(labelsize=6)
   plt.title(cap,fontsize=8)
   return ax

mapit(vLZ[5:-5,5:-5],'V (km/s)',velmap,0,3,0,99,vel=True)
mapit(np.flipud(Image.open(meta+c+'/'+c+'_SDSS_thumbnail_SAMIres.jpg'))[5:-5,5:-5],'SDSS bgr','gray',1,3)
mapit(bpt[5:-5,5:-5],'Excitation',newcmap,2,3,0,100)
mapit(haLZ[5:-5,5:-5],r'H$\alpha$',fmap,0,2,0,100)
mapit(O3LZ[5:-5,5:-5],'[O III]',fmap,1,2,0,100)
ax = mapit(bptgrid,r'log(o3/H$\beta$) vs log(n2/H$\alpha$) key',newcmap,3,3,0,100,lab=True)
ax.autoscale(False)
ax.scatter(ix.reshape(50*50),iy.reshape(50*50),s=5,c='m',zorder=1)
xp = 50*(np.array([-1.711,-1.2978,-0.8703,-0.5685,-0.4069,-0.2801,-0.1171,-0.0098,0.048,0.1332])-n2byhamn)/(n2byhamx-n2byhamn)
yp = 50*(np.array([0.9358,0.8769,0.7462,0.5846,0.4483,0.3,-0.0846,-0.5231,-0.8615,-1.1])-o3byhbmn)/(o3byhbmx-o3byhbmn)
plt.plot(xp,yp,c='k',zorder=1)
#xp = 50*(np.array([-0.4096,0.1402])-n2byhamn)/(n2byhamx-n2byhamn)
#yp = 50*(np.array([0.4253,1.4941])-o3byhbmn)/(o3byhbmx-o3byhbmn)
#plt.plot(xp,yp,c='k',zorder=1)
mapit(s2ratio[5:-5,5:-5],'[S II] ratio',fmap,2,2,5,95)
mapit(dustTau[5:-5,5:-5],r'dust $\tau$',fmap,3,2,5,95)

if test:
   with open('/tmp/'+c+'.txt', 'rb') as file:
      fileContent = file.read()
   fff = struct.unpack("ffffffffffffffffffff", fileContent[:80])
   px = np.zeros(2048)
   py = np.zeros(2048)
   for i in range(2048):
      px[i] = testr0+i*testdr
      py[i] = testrmn+testr[i]*(testrmx-testrmn)
   plt.plot(px,py,'-')
elif model:
   ax = plt.Axes(fig,[0,0,.66,.66])
   fig.add_axes(ax)
   plt.axis('off')
   plt.imshow(sersicR,cmap='gray',origin='lower',interpolation='none',zorder=0)
   ax.add_patch(Circle((318,307),200,fc='none',ec='r',zorder=1))
   ax.add_patch(Circle((940,307),200,fc='none',ec='r',zorder=1))
   ax.add_patch(Circle((318,955),200,fc='none',ec='r',zorder=1))

plt.draw()
plt.savefig('/home/cecil/www/html/crap/'+c+'_newsummary.png',bbox_inches='tight')

ibad = (5577.-bw0)/bdw;
n = 3
blue = np.zeros((bcube.shape[0],25-n,25-n))
red = np.zeros((rcube.shape[0],25-n,25-n))
output_file = open('//home/cecil/www/html/crap/double/'+c+'.txt', 'wb')
k = -1
for j in range(n,50-n,4):
   for i in range(n,50-n,4):
      k += 1  
# now sum over 2x2 then divide by #non-NaN in sum to get per pixel then x 4 to get per arcsec
      bb = np.nansum(bcube[:,j:j+4,i:i+4],axis=(1,2))/np.count_nonzero(~np.isnan(bcube[100,j:j+4,i:i+4])) *4.
      bb[ibad-5:ibad+6] = np.nan
      bmn = np.float32(np.nanmin(bb)); bmx = np.float32(np.nanmax(bb))
      if bmn < 0.: bmn = 0.
      blue[:,j/2-n/2,i/2-n/2] = bb
      rr = np.nansum(rcube[:,j:j+4,i:i+4],axis=(1,2))/np.count_nonzero(~np.isnan(bcube[100,j:j+4,i:i+4])) *4.
      rmn = np.float32(np.nanmin(rr)); rmx = np.float32(np.nanmax(rr))
      red[:,j/2-n/2,i/2-n/2] = rr
      if k == 0:
         float_array= array('f', [bmn,bmx,rmn,rmx,bw0,bdw,bwN,rw0,rdw,rwN,fwhm,zsh,
            absG,absR,absI,absZ,GAMAmetal,GAMAage,0.,0.])
         float_array.tofile(output_file) # 80 byte header
      else:
         float_array = array('f', [bmn,bmx,rmn,rmx])
         float_array.tofile(output_file) # 16 of 80 byte header
         ff = np.zeros(64,dtype=np.uint8)
         ff[:16] = np.array(ix[j:j+4,i:i+4].flatten(),dtype=np.uint8)
         ff[16:32] = np.array(iy[j:j+4,i:i+4].flatten(),dtype=np.uint8)
         byte_array = array('B', ff.flatten())
         byte_array.tofile(output_file) # 64 more bytes
      bb = 255.*(bb-bmn)/(bmx-bmn)
      bb[np.isnan(bb)] = bmn
      outb = array('B', np.uint8(bb)) 
      rr = 255.*(rr-rmn)/(rmx-rmn)
      rr[np.isnan(rr)] = rmn
      outr = array('B', np.uint8(rr))
      outb.tofile(output_file)
      outr.tofile(output_file)

      if test and k == 60:
         testb = outb
         testr = outr
         testbmn = bmn
         testbmx = bmx
         testrmn = rmn
         testrmx = rmx
         testb0 = bw0
         testdb = bdw
         testr0 = rw0
         testdr = rdw

output_file.close()
